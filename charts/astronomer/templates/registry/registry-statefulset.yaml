################################
## Astronomer Registry StatefulSet
#################################
{{- if .Values.global.baseDomain }}
kind: {{ if .Values.registry.gcs.enabled }}Deployment{{ else }}StatefulSet{{ end }}
apiVersion: apps/v1beta2
metadata:
  name: {{ .Release.Name }}-registry
  labels:
    component: registry
    tier: astronomer
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: registry
      tier: astronomer
      release: {{ .Release.Name }}
{{- if not .Values.registry.gcs.enabled }}
  serviceName: {{ .Release.Name }}-registry
{{- end }}
  template:
    metadata:
      labels:
        component: registry
        tier: astronomer
        release: {{ .Release.Name }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/registry/registry-configmap.yaml") . | sha256sum }}
    spec:
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-registry
          image: {{ template  "registry.image" . }}
          imagePullPolicy: {{ .Values.images.registry.pullPolicy }}
          resources:
{{ toYaml .Values.registry.resources | indent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/docker/registry
            - name: certificate
              mountPath: /etc/docker/ssl
            - name: data
              mountPath: /var/lib/registry
            {{- if .Values.registry.gcs.enabled }}
            {{- include "registry.gcsVolumeMount" . | indent 12 }}
            {{- end }}
          ports:
            - name: registry-http
              containerPort: {{ .Values.ports.registryHTTP }}
            # - name: registry-scrape
            #   containerPort: {{ .Values.ports.registryScrape }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.ports.registryHTTP }}
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.ports.registryHTTP }}
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: config
          configMap:
            name: {{ .Release.Name }}-registry
            items:
              - key: config.yml
                path: config.yml
        - name: certificate
          secret:
            secretName: {{ .Values.global.tlsSecret }}
        {{- if .Values.registry.gcs.enabled }}
        {{- include "registry.gcsVolume" . | indent 8 }}
        {{- end }}
  {{- if or (not .Values.registry.persistence.enabled) (.Values.registry.gcs.enabled) }}
        - name: data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.registry.persistence.size }}
      {{- if .Values.registry.persistence.storageClassName }}
        storageClassName: {{ .Values.registry.persistence.storageClassName }}
      {{- end }}
  {{- end }}
{{- end }}
